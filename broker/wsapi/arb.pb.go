// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker/wsapi/arb.proto

package wsapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArbMarket struct {
	HeBase               string                  `protobuf:"bytes,1,opt,name=he_base,json=heBase,proto3" json:"he_base,omitempty"`
	Spread               float64                 `protobuf:"fixed64,2,opt,name=spread,proto3" json:"spread,omitempty"`
	Low                  *ArbMarket_ActiveMarket `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	High                 *ArbMarket_ActiveMarket `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ArbMarket) Reset()         { *m = ArbMarket{} }
func (m *ArbMarket) String() string { return proto.CompactTextString(m) }
func (*ArbMarket) ProtoMessage()    {}
func (*ArbMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb5fe075d6d1fdf7, []int{0}
}

func (m *ArbMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbMarket.Unmarshal(m, b)
}
func (m *ArbMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbMarket.Marshal(b, m, deterministic)
}
func (m *ArbMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbMarket.Merge(m, src)
}
func (m *ArbMarket) XXX_Size() int {
	return xxx_messageInfo_ArbMarket.Size(m)
}
func (m *ArbMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbMarket.DiscardUnknown(m)
}

var xxx_messageInfo_ArbMarket proto.InternalMessageInfo

func (m *ArbMarket) GetHeBase() string {
	if m != nil {
		return m.HeBase
	}
	return ""
}

func (m *ArbMarket) GetSpread() float64 {
	if m != nil {
		return m.Spread
	}
	return 0
}

func (m *ArbMarket) GetLow() *ArbMarket_ActiveMarket {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *ArbMarket) GetHigh() *ArbMarket_ActiveMarket {
	if m != nil {
		return m.High
	}
	return nil
}

type ArbMarket_ActiveMarket struct {
	Exchange             string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	HePair               string   `protobuf:"bytes,2,opt,name=he_pair,json=hePair,proto3" json:"he_pair,omitempty"`
	ExPair               string   `protobuf:"bytes,3,opt,name=ex_pair,json=exPair,proto3" json:"ex_pair,omitempty"`
	Price                string   `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	TriangulatedPrice    string   `protobuf:"bytes,5,opt,name=triangulated_price,json=triangulatedPrice,proto3" json:"triangulated_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArbMarket_ActiveMarket) Reset()         { *m = ArbMarket_ActiveMarket{} }
func (m *ArbMarket_ActiveMarket) String() string { return proto.CompactTextString(m) }
func (*ArbMarket_ActiveMarket) ProtoMessage()    {}
func (*ArbMarket_ActiveMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb5fe075d6d1fdf7, []int{0, 0}
}

func (m *ArbMarket_ActiveMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbMarket_ActiveMarket.Unmarshal(m, b)
}
func (m *ArbMarket_ActiveMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbMarket_ActiveMarket.Marshal(b, m, deterministic)
}
func (m *ArbMarket_ActiveMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbMarket_ActiveMarket.Merge(m, src)
}
func (m *ArbMarket_ActiveMarket) XXX_Size() int {
	return xxx_messageInfo_ArbMarket_ActiveMarket.Size(m)
}
func (m *ArbMarket_ActiveMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbMarket_ActiveMarket.DiscardUnknown(m)
}

var xxx_messageInfo_ArbMarket_ActiveMarket proto.InternalMessageInfo

func (m *ArbMarket_ActiveMarket) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ArbMarket_ActiveMarket) GetHePair() string {
	if m != nil {
		return m.HePair
	}
	return ""
}

func (m *ArbMarket_ActiveMarket) GetExPair() string {
	if m != nil {
		return m.ExPair
	}
	return ""
}

func (m *ArbMarket_ActiveMarket) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *ArbMarket_ActiveMarket) GetTriangulatedPrice() string {
	if m != nil {
		return m.TriangulatedPrice
	}
	return ""
}

// ArbMarkets is sent to the client once only on initial connection
// it returns the markets currently cached by broker
type ArbMarkets struct {
	Markets              []*ArbMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArbMarkets) Reset()         { *m = ArbMarkets{} }
func (m *ArbMarkets) String() string { return proto.CompactTextString(m) }
func (*ArbMarkets) ProtoMessage()    {}
func (*ArbMarkets) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb5fe075d6d1fdf7, []int{1}
}

func (m *ArbMarkets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbMarkets.Unmarshal(m, b)
}
func (m *ArbMarkets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbMarkets.Marshal(b, m, deterministic)
}
func (m *ArbMarkets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbMarkets.Merge(m, src)
}
func (m *ArbMarkets) XXX_Size() int {
	return xxx_messageInfo_ArbMarkets.Size(m)
}
func (m *ArbMarkets) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbMarkets.DiscardUnknown(m)
}

var xxx_messageInfo_ArbMarkets proto.InternalMessageInfo

func (m *ArbMarkets) GetMarkets() []*ArbMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

func init() {
	proto.RegisterType((*ArbMarket)(nil), "wsapi.ArbMarket")
	proto.RegisterType((*ArbMarket_ActiveMarket)(nil), "wsapi.ArbMarket.ActiveMarket")
	proto.RegisterType((*ArbMarkets)(nil), "wsapi.ArbMarkets")
}

func init() { proto.RegisterFile("broker/wsapi/arb.proto", fileDescriptor_fb5fe075d6d1fdf7) }

var fileDescriptor_fb5fe075d6d1fdf7 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0xa6, 0x49, 0xcd, 0xd4, 0x83, 0x2e, 0x52, 0x43, 0x41, 0x08, 0x3d, 0x05, 0xc1,
	0x04, 0xeb, 0xc5, 0x6b, 0xbd, 0x0b, 0x25, 0x2f, 0x50, 0x26, 0xe9, 0x90, 0x2c, 0xad, 0x4d, 0x98,
	0x5d, 0x6d, 0x5e, 0xc7, 0x77, 0xf1, 0xc1, 0x24, 0xbb, 0x6d, 0x28, 0x9e, 0xbc, 0xed, 0x3f, 0xdf,
	0xbf, 0xc3, 0xff, 0x33, 0x30, 0x2b, 0xb8, 0xd9, 0x11, 0x67, 0x47, 0x8d, 0xad, 0xca, 0x90, 0x8b,
	0xb4, 0xe5, 0xc6, 0x34, 0xd2, 0xb7, 0x83, 0xc5, 0xcf, 0x08, 0xc2, 0x15, 0x17, 0xef, 0xc8, 0x3b,
	0x32, 0xf2, 0x1e, 0x26, 0x35, 0x6d, 0x0a, 0xd4, 0x14, 0x89, 0x58, 0x24, 0x61, 0x1e, 0xd4, 0xf4,
	0x86, 0x9a, 0xe4, 0x0c, 0x02, 0xdd, 0x32, 0xe1, 0x36, 0x1a, 0xc5, 0x22, 0x11, 0xf9, 0x49, 0xc9,
	0x0c, 0xbc, 0x7d, 0x73, 0x8c, 0xbc, 0x58, 0x24, 0xd3, 0xe5, 0x43, 0x6a, 0x77, 0xa6, 0xc3, 0xbe,
	0x74, 0x55, 0x1a, 0xf5, 0x45, 0x4e, 0xe4, 0xbd, 0x53, 0x3e, 0xc3, 0xb8, 0x56, 0x55, 0x1d, 0x8d,
	0xff, 0xf3, 0xc3, 0x5a, 0xe7, 0xdf, 0x02, 0xae, 0x2f, 0xc7, 0x72, 0x0e, 0x57, 0xd4, 0x95, 0x35,
	0x1e, 0xaa, 0x73, 0xcc, 0x41, 0x9f, 0x1a, 0xb4, 0xa8, 0xd8, 0x26, 0xb5, 0x0d, 0xd6, 0xa8, 0xb8,
	0x07, 0xd4, 0x39, 0xe0, 0x39, 0x40, 0x9d, 0x05, 0x77, 0xe0, 0xb7, 0xac, 0x4a, 0xb2, 0x91, 0xc2,
	0xdc, 0x09, 0xf9, 0x04, 0xd2, 0xb0, 0xc2, 0x43, 0xf5, 0xb9, 0x47, 0x43, 0xdb, 0x8d, 0xb3, 0xf8,
	0xd6, 0x72, 0x7b, 0x49, 0xd6, 0x3d, 0x58, 0xbc, 0x02, 0x0c, 0x1d, 0xb4, 0x7c, 0x84, 0xc9, 0x87,
	0x7b, 0x46, 0x22, 0xf6, 0x92, 0xe9, 0xf2, 0xe6, 0x6f, 0xcf, 0xfc, 0x6c, 0x28, 0x02, 0x7b, 0x8e,
	0x97, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x7d, 0x0d, 0x81, 0xa8, 0x01, 0x00, 0x00,
}
